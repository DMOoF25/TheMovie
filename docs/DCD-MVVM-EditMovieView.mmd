classDiagram
    direction TB
    Title MVVM Diagram - EditMovieView and MovieListView

    %% See DCD.mmd for Movie, GenreOptionViewModel, and InstructorListItemViewModel class details
    %% This diagram focuses on the MVVM structure for EditMovieView and MovieListView

    namespace TheMovie.UI.Views {
        class EditMovieView {
            +EditMovieView()
        }

        class MovieListView {
            +MovieListView()
        }
    }

    namespace TheMovie.UI.ViewModels {
        class MovieViewModel {
                +string Title
                +string DurationText
                +DateOnly PremiereDate
                +Guid? SelectedInstructorId
                +ObservableCollection~GenreOptionViewModel~ GenreOptions
                +ObservableCollection~InstructorListItemViewModel~ Instructors
                +event EventHandler~Movie~ MovieSaved
                +Task LoadAsync(Guid id)
                +Task InitializeAsync()
                +bool Validate()
        }

        class MovieListViewModel {
            +MovieListItemViewModel? SelectedMovie
            +Task RefreshAsync()
            +event PropertyChangedEventHandler? PropertyChanged

        }

        class MovieListItemViewModel {
            +Guid Id
            +string Title
            +int Duration
            +DateOnly PremiereDate
            +string GenresDisplay
            +string InstructorNameDisplay
            +MovieListItemViewModel(Movie movie)
        }

        class ViewModelBase~TRepos, TEntity~ {
            #ViewModelBase(TRepos repository)
            +ICommand AddCommand
            +ICommand SaveCommand
            +ICommand DeleteCommand
            +ICommand ResetCommand
            +ICommand CancelCommand
            +string? Error
            +bool HasError
            +bool IsSaving
            +bool IsEditMode
            +bool IsAddMode
            +Task LoadAsync(Guid id)
            #bool CanSubmitCore()
            #Task OnAddAsync()
            #Task OnSaveAsync()
            #Task OnDeleteAsync()
            #Task OnResetAsync()
            #Task OnCancelAsync()
            #void RefreshCommandStates()
        }

        class ListViewModelBase~TItem~ {
            +ObservableCollection~TItem~ Items
            +TItem? SelectedItem
            +bool IsLoading
            +string? Error
            +ICommand RefreshCommand
            +Task RefreshAsync()
        }

        class ModelBase {
            #void OnPropertyChanged(string? propertyName)
        }
    }

    namespace TheMovie.UI.Commands {
        class RelayCommand {
            +RelayCommand(Action execute, Func~bool~ canExecute)
            +Execute(object) void
            +CanExecute(object) bool
        }
    }
    namespace TheMovie.UI.Converters {
        class NullToVisibilityConverter {
            +Convert(object, Type, object, CultureInfo) object
            +ConvertBack(object, Type, object, CultureInfo) object
        }
    }
    
    EditMovieView ..> NullToVisibilityConverter : Uses
    EditMovieView --o MovieViewModel : DataContext binds

    ListViewModelBase~TItem~ --|> ModelBase : Inherits
    MovieListViewModel --|> ListViewModelBase~MovieListItemViewModel~ : Inherits
    MovieListView --o MovieListViewModel : DataContext binds
    MovieListViewModel ..> MovieListItemViewModel : Uses

    ViewModelBase~TRepos, TEntity~ --|> ModelBase : Inherits
    MovieViewModel --|> ViewModelBase~IMovieRepository, Movie~ : Inherits
    MovieViewModel ..> Movie : Uses
    MovieViewModel ..> GenreOptionViewModel : Uses
    MovieViewModel ..> InstructorListItemViewModel : Uses
    MovieViewModel ..> RelayCommand : Uses

    NullToVisibilityConverter ..|> IValueConverter

    note for Movie "See DCD.mmd for Movie class details"
    note for GenreOptionViewModel "See DCD.mmd for GenreOptionViewModel class details"
    note for InstructorListItemViewModel "See DCD.mmd for InstructorListItemViewModel class details"